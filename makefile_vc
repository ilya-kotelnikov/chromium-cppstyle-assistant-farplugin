# Plugin stuff: part 1.
# (See part 2 at the end of file.)
NAME = Chromium-CppStyle-Assistant
NAME_SHORT = cc_assistant

LINK_OBJS = $(OBJDIR)\cc_assistant.obj \
            $(OBJDIR)\config_settings.obj \
            $(OBJDIR)\constants.obj

DOCS = Chromium-CppStyle-Assistant.lua \
       OptionsEng.hlf OptionsEng.lng OptionsRus.hlf OptionsRus.lng

# System stuff (copied and adopted from Far sources).
!if defined(AMD64) || "$(CPU)" == "AMD64" || "$(PLATFORM)" == "X64" || "$(PLATFORM)" == "x64"
BUILD_PLATFORM=AMD64
DIRBIT = 64
!elseif defined(IA64) || "$(CPU)" == "IA64" || "$(PLATFORM)" == "Itanium"
BUILD_PLATFORM=IA64
DIRBIT = IA64
!else
BUILD_PLATFORM=X86
DIRBIT = 32
!endif

!if !defined(VC) && defined(_NMAKE_VER)
!if "$(_NMAKE_VER)">"14"
VC=14
!elseif "$(_NMAKE_VER)">"11"
VC=11
!else
#default
VC=10
!endif
!endif

!ifndef DEBUG
DIRNAME=final
!else
DIRNAME=debug
!endif

WORKDIR = $(DIRNAME).$(DIRBIT).vc
!ifdef INSTALL
OUTDIR=$(INSTALL)
!else
OUTDIR=$(WORKDIR)
!endif

DOCS_DIR = distrib
OBJDIR = $(WORKDIR)\obj$(ADDOBJDIR)
COMINC = far/pluginapi
CPP_WIDE = /DUNICODE /D_UNICODE
RC_WIDE = /dUNICODE
EXT = dll
DLLNAME = $(NAME).$(EXT)
DLLFULLNAME = $(OUTDIR)$(ADDOUTDIR)\$(DLLNAME)
DEFFILE = $(NAME_SHORT).vc.def
DEFOPT = /def:$(DEFFILE)
MAP = $(OUTDIR)$(ADDOUTDIR)\$(NAME_SHORT).map
RES = $(OBJDIR)\$(NAME_SHORT).res

AFLAGS = /nologo /c /Fo"$(OBJDIR)\\"
CPPFLAGS = /nologo /MP /c /W3 /Gy /GF /J /GS- /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /DNOMINMAX /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0502 $(USERCPP) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\"

!ifndef DEBUG
CPPFLAGS=$(CPPFLAGS) /DNDEBUG /O2
!else
CPPFLAGS=$(CPPFLAGS) /DDEBUG /Od
!endif

!ifndef NO_RELEASE_PDB
CPPFLAGS=$(CPPFLAGS) /Zi
!endif

!if $(VC) >= 11 && "$(BUILD_PLATFORM)" == "X86"
CPPFLAGS=$(CPPFLAGS) /arch:IA32
!endif

!if $(VC) >= 14
CPPFLAGS = $(CPPFLAGS) /Zc:threadSafeInit-
!endif

!if $(VC) >= 14
FIXCRT_CPPFLAGS = /Zc:threadSafeInit-
!endif

!if "$(BUILD_PLATFORM)" == "AMD64"
ULOUT=-Tpd+
!elseif "$(BUILD_PLATFORM)" == "IA64"
ULOUT=-Tpd+
!else
ULOUT=-Tpd -Rv
!endif

LIBS = chkstk.obj kernel32.lib user32.lib gdi32.lib advapi32.lib shell32.lib ole32.lib uuid.lib mpr.lib Netapi32.lib version.lib oleaut32.lib wbemuuid.lib $(USERLIBS)

!ifdef _BIN_PATH_
!ifndef _ML_PATH_
_ML_PATH_=$(_BIN_PATH_)
!endif
!ifndef _CL_PATH_
_CL_PATH_=$(_BIN_PATH_)
!endif
!ifndef _RC_PATH_
_RC_PATH_=$(_BIN_PATH_)
!endif
!ifndef _LINK_PATH_
_LINK_PATH_=$(_BIN_PATH_)
!endif
!endif

!ifndef ULINK
LNK=$(_LINK_PATH_)link.exe
!ifdef NOENTRY
NOENTRY_FLAG = /noentry
!endif
!ifdef NODEFLIB
NODEFLIB_FLAG = /nodefaultlib
!endif

!if "$(BUILD_PLATFORM)" == "X86" && $(VC) < 11
SUBSYSTEM=/subsystem:windows,5.0
!endif
LINK_FLAGS=$(SUBSYSTEM) /nologo /dll /release /dynamicbase /merge:.rdata=.text $(NOENTRY_FLAG) $(NODEFLIB_FLAG) $(ENV_LIB_OPT) $(DEFOPT) /map:"$(MAP)" /out:"$(DLLFULLNAME)"
!ifndef NO_RELEASE_PDB
LINK_FLAGS=$(LINK_FLAGS) /debug
!endif
!ifndef DEBUG
LINK_FLAGS=$(LINK_FLAGS) /incremental:no /OPT:REF /OPT:ICF
!endif
!else
LNK=$(_ULINK_PATH_)ulink.exe +-
!ifdef NOENTRY
NOENTRY_FLAG = -e-
!endif
!ifdef NODEFLIB
NODEFLIB_FLAG = -n
!endif
!ifdef DEFFILE
LINK_DEF_OPT=/ZD:"$(DEFFILE)"
!endif
!ifdef GEN_IMPLIB
LINK_GEN_IMPLIB=-Gic
!endif
LINK_FLAGS=-q -V5.0 -W5.0 -b* $(ULOUT) $(ULN_DELAY) -Gz -m- -v -Gh -Gh- $(NOENTRY_FLAG) $(NODEFLIB_FLAG) $(LINK_DEF_OPT) /ZM:"$(MAP)" /ZO:"$(DLLFULLNAME)" $(LINK_GEN_IMPLIB) $(ENV_LIB_OPT)
!endif

!ifndef AS
AS=$(_ML_PATH_)ml.exe
!endif

!ifndef CC
CC=$(_CL_PATH_)cl.exe
!endif

!ifndef LIBR
LIBR=$(_LINK_PATH_)lib.exe
!endif

!ifndef RC
RC=$(_RC_PATH)rc.exe
!endif

!if !defined(SRC_PATHS_DEFINED) && defined(__MAKE__)
.path.asm=.
.path.cpp=.
.path.c=.
.path.hpp=.
.path.h=.
.path.rc=.
.path.def=.
!endif

!ifndef NODEFLIB
!if "$(BUILD_PLATFORM)" =="X86"
!ifndef ULINK
LINK_OBJS = $(LINK_OBJS) $(OBJDIR)\vc_crt_fix.obj $(OBJDIR)\vc_crt_fix_impl.obj
!else
LINK_OBJS = $(LINK_OBJS) $(OBJDIR)\vc_crt_fix_ulink.obj
!endif
!endif
!endif

ALL: $(INSTALL) $(DLLFULLNAME)

$(DLLFULLNAME) : $(LINK_OBJS) $(RES) $(LINK_DEP)
!ifndef __MAKE__
	$(LNK) @<<
	$(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
<<
!else
	$(LNK) $(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
!endif
!ifdef DOCS
!ifndef __MAKE__
	for %%i in ($(DOCS)) do @copy /Y $(DOCS_DIR)\%%i $(OUTDIR)$(ADDOUTDIR) > nul
!else
	for %i in ($(DOCS)) do @copy /Y $(DOCS_DIR)\%i $(OUTDIR)$(ADDOUTDIR) > nul
!endif
!endif

!ifndef __MAKE__
.cpp{$(OBJDIR)}.obj::
	$(CC) @<<
	$(CPPFLAGS) $<
<<
!else
.cpp{$(OBJDIR)}.obj:
	$(CC) $(CPPFLAGS) { $< }
!endif

$(RES): $(RC_NAME).rc $(COMINC)\farversion.hpp $(COMINC)\plugin.hpp
	$(RC) /nologo /I"$(COMINC)" $(ENV_INC_OPT) $(RC_WIDE) /fo"$(RES)" $(RC_NAME).rc

.PHONY: dirs
dirs:
!ifdef INSTALL
	if not exist "$(WORKDIR)\$(NULL)" mkdir "$(WORKDIR)"
!endif
	if not exist "$(OBJDIR)\$(NULL)" mkdir "$(OBJDIR)"
	if not exist "$(OUTDIR)\$(NULL)" mkdir "$(OUTDIR)"
	if not exist "$(OUTDIR)$(ADDOUTDIR)\$(NULL)" mkdir "$(OUTDIR)$(ADDOUTDIR)"

# Plugin stuff: part 2.
$(OBJDIR)\cc_assistant.obj: cc_assistant.cpp config_settings.hpp \
                            localized_strings_ids.hpp guid.hpp version.hpp \
                            $(COMINC)\Plugin.hpp \
                            $(COMINC)\PluginSettings.hpp \
                            $(COMINC)\DlgBuilder.hpp

$(OBJDIR)\config_settings.obj: config_settings.cpp config_settings.hpp \
                               constants.hpp

$(OBJDIR)\constants.obj: constants.cpp constants.hpp
